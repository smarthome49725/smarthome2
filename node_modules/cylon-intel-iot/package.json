{
  "name": "cylon-intel-iot",
  "version": "0.4.0",
  "main": "lib/cylon-intel-iot.js",
  "description": "Cylon module for Intel-IoT platforms",
  "homepage": "http://cylonjs.com",
  "bugs": {
    "url": "https://github.com/hybridgroup/cylon-intel-iot/issues"
  },
  "author": {
    "name": "The Hybrid Group",
    "email": "cylonjs@hybridgroup.com"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/hybridgroup/cylon-intel-iot.git"
  },
  "license": "Apache 2.0",
  "devDependencies": {
    "sinon-chai": "2.5.0",
    "chai": "1.9.1",
    "mocha": "1.18.2",
    "sinon": "1.9.1",
    "jshint": "2.5.0"
  },
  "peerDependencies": {
    "cylon": ">= 0.21.0 < 1",
    "cylon-gpio": ">= 0.21.0 < 1",
    "cylon-i2c": ">= 0.18.0 < 1"
  },
  "dependencies": {
    "cylon": "~0.21.0",
    "cylon-gpio": "~0.21.0",
    "cylon-i2c": "~0.18.0"
  },
  "readme": "# Cylon.js For Intel IoT\n\nCylon.js (http://cylonjs.com) is a JavaScript framework for robotics and\nphysical computing using Node.js\n\nThis repository contains the Cylon adaptor for the [Intel Edison](http://www.intel.com/content/www/us/en/do-it-yourself/edison.html) and [Intel Galileo](http://www.intel.com/content/www/us/en/do-it-yourself/galileo-maker-quark-board.html) IoT platforms. It uses the MRAA node module (https://github.com/intel-iot-devkit/mraa) created by the [Intel IoT team](https://github.com/intel-iot-devkit) thank you!\n\nThis module currently supports the following Intel IoT hardware:\n- Intel Galileo Gen 1\n- Intel Galileo Gen 2\n- Intel Edison with the Arduino breakout board\n\nFor more information about Cylon.js, check out the repo at\nhttps://github.com/hybridgroup/cylon\n\n[![Build Status](https://secure.travis-ci.org/hybridgroup/cylon-intel-iot.png?branch=master)](http://travis-ci.org/hybridgroup/cylon-intel-iot) [![Code Climate](https://codeclimate.com/github/hybridgroup/cylon-intel-iot/badges/gpa.svg)](https://codeclimate.com/github/hybridgroup/cylon-intel-iot) [![Test Coverage](https://codeclimate.com/github/hybridgroup/cylon-intel-iot/badges/coverage.svg)](https://codeclimate.com/github/hybridgroup/cylon-intel-iot)\n\n## Getting Started\n\n#### Setting up your Intel Edison\n\nEverything you need to get started with the Edison is in the Intel Getting Started Guide\nlocated [here](https://communities.intel.com/docs/DOC-23147). Don't forget to\nconfigure your Edison's wifi connection and [flash](https://communities.intel.com/docs/DOC-23192)\nyour Edison with the latest firmware image!\n\nIn order to enable Ethernet over USB on your Edison, follow the appropriate guide for your OS\n\n###### Windows\n- Go to control panel -> network and sharing center -> change adaptor settings\n- When you plug both usb cables into your computer, you should see a new network device show up\n- Right click on the new device and select properties\n- Scroll down to IPv4 and select properties\n- Select \"Use the folloing IP address\"\n- Set the IP information to:\n\t- IP address:           `192.168.2.1`\n\t- Subnet mask:          `255.255.255.0`\n\t- Default gateway:      `192.168.2.255`\n\t- Preferred DNS server: `8.8.8.8`\n- Save the changes \n- open putty\n- ssh to 192.168.2.15\n- The user is 'root' and the password is what you configured during the getting started guide\n\n###### OS X\n- Install the usb tethering driver http://joshuawise.com/horndis#available_versions\n- Open network preferences\n- Plug your Edison into your computer\n- Find the device `Edison`\n- Configure IPv4: Using DHCP with manual address\n\t- `192.168.2.1`\n- Open a terminal\n- $ ssh root@192.168.2.15\n\n###### Linux\n- Examine your `/etc/network/interfaces` file, if you do not have this line, you must add it and then restart your computer\n```\niface usb0 inet dhcp\n```\n- Plug your Edison into your computer\n- $ sudo ifconfig usb0 192.168.2.1 255.255.255.0\n- $ ssh root@192.168.2.15\n\nThe Edison is now able to use it's wifi connection to reach the internet and your local USB to Ethernet connection for local ssh access and programming. If you have problems reaching the internet, you may need to setup the DNS on your Edison.\n\nExecute the following command on the Edison itself\n\n    # cat \"nameserver 8.8.8.8 > /etc/resolv.conf\"\n\nIf you have a valid wifi connection, you should be able to reach out of your network!\n\n\nNow you're ready to install MRAA and Cylon.\n\n#### Setting up your Intel Galileo\n\nIn order to use `cylon-intel-iot` on your Galileo, you need to install the Intel IoT linux boot image onto an sd card.\nYou can download the latest image [here](https://software.intel.com/sites/landingpage/iotdk/board-boot-image.html).\n\nFor Windows hosts you can follow the instruction for flashing your sd card image [here](https://software.intel.com/en-us/node/530353).\n\nFor Mac or Linux hosts, it's as easy as extracting the image from the downloaded archive and executing the command\n\n    $ sudo dd if=/path/to/iot-devkit-latest-mmcblkp0.direct of=/dev/sdX bs=1M && sudo sync\n\nwhere `/dev/sdX` is the location of your sd card. For help determing the location of your sd card, consult the appropriate guide for your OS below. \n\n###### OS X Users\n\nTo prepare your SD card for flashing on OS X, you need to find out it's drive name and eject the volume.\n\nTo find the name, use the built-in `diskutil` utility:\n\n    $ diskutil list\n    /dev/disk0\n      #:                       TYPE NAME                    SIZE       IDENTIFIER\n      0:      GUID_partition_scheme                        *500.3 GB   disk0\n      1:                        EFI EFI                     209.7 MB   disk0s1\n      2:                  Apple_HFS Macintosh HD            499.4 GB   disk0s2\n      3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3\n    /dev/disk1\n      #:                       TYPE NAME                    SIZE       IDENTIFIER\n      0:     FDisk_partition_scheme                        *15.7 GB    disk1\n      1:             Windows_FAT_32 NO NAME                 15.7 GB    disk1s1\n\nAccording to this, our SD card is found at `/dev/disk1`.\n\nBefore you flash it with the above `dd` command, use `diskutil` to eject the existing volume (`disk1s1`):\n\n    $ diskutil unmount /dev/disk1s1\n\n###### Linux Users\nTo prepare your SD card for flashing on Linux, you need to find the device location of your SD card. An easy way to determin the location is by filtering the `/dev/` directory for new storage devices. Before you plug in your SD card, execute the following `ls` command\n\n    $ ls -l /dev/sd*\n    brw-rw---- 1 root disk 8,  0 Sep 16 21:48 /dev/sda\n    brw-rw---- 1 root disk 8,  1 Sep 16 21:48 /dev/sda1\n    brw-rw---- 1 root disk 8,  2 Sep 16 21:48 /dev/sda2\n    brw-rw---- 1 root disk 8,  5 Sep 16 21:48 /dev/sda5\n\n\nYou can see that I only have one storage device `/dev/sda`. Now plug in your SD card and execute the `ls` command again\n\n    $ ls -l /dev/sd*\n    brw-rw---- 1 root disk 8,  0 Sep 16 21:48 /dev/sda\n    brw-rw---- 1 root disk 8,  1 Sep 16 21:48 /dev/sda1\n    brw-rw---- 1 root disk 8,  2 Sep 16 21:48 /dev/sda2\n    brw-rw---- 1 root disk 8,  5 Sep 16 21:48 /dev/sda5\n    brw-rw---- 1 root disk 8, 16 Sep 17 17:46 /dev/sdb\n    brw-rw---- 1 root disk 8, 17 Sep 17 17:46 /dev/sdb1\n    brw-rw---- 1 root disk 8, 18 Sep 17 17:46 /dev/sdb2\n\n\nYou can see from this output that I now have a new storage device `/dev/sdb`. That is the location of my SD card, so in this instance the `/dev/sdX` in our `dd` command will be `/dev/sdb`.\n\nAfter the image has been flashed to your sd card, install the sd card into the Galileo, connect it to your local network and power it up!\n\nNow you're ready to install MRAA and Cylon.\n\n#### Install MRAA\nAfter you have flashed your Intel board and connected it to a network,\nyou must now install the latest version of the\n[Intel MRAA library](https://github.com/intel-iot-devkit/mraa). In order to update MRAA\nyou simply log into your Intel board, through ssh or the uart serial connection, and follow\nthe steps [here](https://github.com/intel-iot-devkit/mraa#installing-on-your-board).\n\n#### Install Cylon\n\nOnce you have flashed your Intel board with the latest firmware as well as updated MRAA,\nyou will now install `cylon-intel-iot`. To do this you must be\nlogged into the board, through ssh or the uart serial connection, and execute the\nfollowing command\n\n    $ npm install cylon-intel-iot\n\nOnce `cylon-intel-iot` has been installed , you're ready to start programming!\n\n\n## Examples\n\n### Blinking the built in LED\n```javascript\nvar cylon = require('cylon');\n\ncylon.robot({\n  connection: { name: 'edison', adaptor: 'intel-iot' },\n  device: {name: 'led', driver: 'led', pin: 13 }\n})\n  .on('ready', function(robot) {\n    setInterval(function() {\n      robot.led.toggle();\n    }, 1000);\n  })\n  .start();\n``` \n\n### Bluetooth Programming on the Intel Edison featuring Sphero\n\nThe Edison includes a bluetooth radio right on the board itself, so it's easy to get started programming bluetooth devices out of the box. First we need to enable bluetooth on the Edison.\n - ssh into your Edison\n - `# rfkill unblock bluetooth`\n - `# bluetoothctl`\n    - `[bluetooth]# scan on` \n\t- Find your Sphero and take note of the MAC address\n\t- `[bluetooth]# scan off`\n\t- `[bluetooth]# pair [MAC address of Sphero]`\n\t- `[bluetooth]# exit`\n - `# rfcomm bind 0 [MAC address of Sphero] 1`\n - This will create a sphero connection bound to `/dev/rfcomm0`\n - `# npm install cylon-intel-iot cylon-sphero`\n\nThis example will flash the built in LED whenever the Sphero detects a collision\n```javascript\nvar cylon = require('cylon');\n\ncylon.robot({\n  connections: [\n    { name: 'edison', adaptor: 'intel-iot'},\n    { name: 'sphero', adaptor: 'sphero', port: '/dev/rfcomm0' }\n  ],\n  devices: [\n    { name: 'led', driver: 'led', pin: 13, connection: 'edison' },\n    { name: 'sphero', driver: 'sphero', connection: 'sphero' }\n  ]\n})\n  .on('ready', function(robot){\n    console.log(\"Setting up Collision Detection...\");\n    robot.sphero.stop();\n    robot.sphero.detectCollisions();\n\n    robot.sphero.on('collision', function() {\n      console.log(\"Collision\");\n      robot.led.toggle();\n    });\n  })\n  .on('error', function(err){\n    console.log(err);\n  }).start();\n```\n\n## Contributing\n\n* All patches must be provided under the Apache 2.0 License\n* Please use the -s option in git to \"sign off\" that the commit is your work and you are providing it under the Apache 2.0 License\n* Submit a Github Pull Request to the appropriate branch and ideally discuss the changes with us in IRC.\n* We will look at the patch, test it out, and give you feedback.\n* Avoid doing minor whitespace changes, renamings, etc. along with merged content. These will be done by the maintainers from time to time but they can complicate merges and should be done seperately.\n* Take care to maintain the existing coding style.\n* Add unit tests for any new or changed functionality & lint and test your code using `make test` and `make lint`.\n* All pull requests should be \"fast forward\"\n  * If there are commits after yours use “git rebase -i <new_head_branch>”\n    * If you have local changes you may need to use “git stash”\n      * For git help see [progit](http://git-scm.com/book) which is an awesome (and free) book on git\n\n## Release History\n\nVersion 0.4.0 - Compatability with Cylon 0.21.0\n\nVersion 0.3.0 - Compatability with Cylon 0.20.0\n\nVersion 0.2.0 - Compatability with Cylon 0.19.0\n\nVersion 0.1.1 - Fix PWM issue on Galileo Gen 1\n\nVersion 0.1.0 - Initial release\n\n## License\nCopyright (c) 2013-2014 The Hybrid Group. Licensed under the Apache 2.0 license.\n",
  "readmeFilename": "README.markdown",
  "_id": "cylon-intel-iot@0.4.0",
  "_from": "cylon-intel-iot@>=0.4.0 <0.5.0"
}
